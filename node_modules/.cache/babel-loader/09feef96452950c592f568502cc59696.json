{"ast":null,"code":"var _jsxFileName = \"/Users/meenumaria/Desktop/import-excel-code/src/components/OutTable.js\";\nimport React, { Component } from 'react';\nimport XLSX from 'xlsx';\nexport class OutTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: this.props.tableClassName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, this.props.columns.map(c => React.createElement(\"th\", {\n      key: c.key,\n      className: c.key === -1 ? this.props.tableHeaderRowClass : \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, c.key === -1 ? \"\" : c.name))), this.props.data.map((r, i) => React.createElement(\"tr\", {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      key: i,\n      className: this.props.tableHeaderRowClass,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, i + 1), this.props.columns.map(c => React.createElement(\"td\", {\n      key: c.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, r[c.key])))))));\n  }\n\n}\nexport function ExcelRenderer(file, callback) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    var rABS = !!reader.readAsBinaryString;\n\n    reader.onload = function (e) {\n      /* Parse data */\n      var bstr = e.target.result;\n      var wb = XLSX.read(bstr, {\n        type: rABS ? \"binary\" : \"array\"\n      });\n      /* Get first worksheet */\n\n      var wsname = wb.SheetNames[0];\n      var ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      var json = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      var cols = make_cols(ws[\"!ref\"]);\n      var data = {\n        rows: json,\n        cols: cols\n      };\n      resolve(data);\n      return callback(null, data);\n    };\n\n    if (file && rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  });\n}\n\nfunction make_cols(refstr) {\n  var o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) {\n    o[i] = {\n      name: XLSX.utils.encode_col(i),\n      key: i\n    };\n  }\n\n  return o;\n}","map":{"version":3,"sources":["/Users/meenumaria/Desktop/import-excel-code/src/components/OutTable.js"],"names":["React","Component","XLSX","OutTable","constructor","props","state","render","tableClassName","columns","map","c","key","tableHeaderRowClass","name","data","r","i","ExcelRenderer","file","callback","Promise","resolve","reject","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","json","utils","sheet_to_json","header","cols","make_cols","rows","readAsArrayBuffer","refstr","o","C","decode_range","encode_col"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport XLSX from 'xlsx';\n\nexport class OutTable extends Component {\n\n\tconstructor(props) { \n        super(props);\n        this.state = {\n            \n        }\n    }\n\n\trender() { \n        return (\n            <div>\n                <table className={this.props.tableClassName}  >                                       \n                    <tbody>\n                        <tr>\n                            {\n                                this.props.columns.map((c) => \n                                    <th key={c.key} className={c.key === -1 ? this.props.tableHeaderRowClass : \"\"}>{c.key === -1 ? \"\" : c.name}</th>\n                                )\n                            \n                            }\n                        </tr>\n                        {this.props.data.map((r,i) => <tr key={i}><td key={i} className={this.props.tableHeaderRowClass}>{i+1}</td>\n                            {this.props.columns.map(c => <td key={c.key}>{ r[c.key] }</td>)}\n                        </tr>)}\n                    </tbody>\n                </table>\n            </div>\n        ); \n    }\n}\n\nexport function ExcelRenderer(file, callback) {\n    return new Promise(function(resolve, reject) {\n      var reader = new FileReader();\n      var rABS = !!reader.readAsBinaryString;\n      reader.onload = function(e) {\n        /* Parse data */\n        var bstr = e.target.result;\n        var wb = XLSX.read(bstr, { type: rABS ? \"binary\" : \"array\" });\n  \n        /* Get first worksheet */\n        var wsname = wb.SheetNames[0];\n        var ws = wb.Sheets[wsname];\n  \n        /* Convert array of arrays */\n        var json = XLSX.utils.sheet_to_json(ws, { header: 1 });\n        var cols = make_cols(ws[\"!ref\"]);\n  \n        var data = { rows: json, cols: cols };\n  \n        resolve(data);\n        return callback(null, data);\n      };\n      if (file && rABS) reader.readAsBinaryString(file);\n      else reader.readAsArrayBuffer(file);\n    });\n  }\n  \n  function make_cols(refstr) {\n    var o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n    for (var i = 0; i < C; ++i) {\n      o[i] = { name: XLSX.utils.encode_col(i), key: i };\n    }  \n    return o;\n  }"]},"metadata":{},"sourceType":"module"}