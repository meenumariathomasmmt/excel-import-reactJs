{"ast":null,"code":"import XLSX from 'xlsx';\n/* generate an array of column objects */\n\nexport const make_cols = refstr => {\n  let o = [];\n  let range = XLSX.utils.decode_range(refstr).e.c + 1; // for(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\n  // return o;\n\n  for (let rowNum = range.s.r; rowNum <= range.e.r; rowNum++) {\n    let row = [];\n\n    for (let colNum = range.s.c; colNum <= range.e.c; colNum++) {\n      var nextCell = sheet[XLSX.utils.encode_cell({\n        r: rowNum,\n        c: colNum\n      })];\n\n      if (typeof nextCell === 'undefined') {\n        row.push(void 0);\n      } else row.push(nextCell.w);\n    }\n\n    o.push(row);\n    return o;\n  }\n};","map":{"version":3,"sources":["/Users/meenumaria/Desktop/import-excel-code/src/components/MakeColumns.js"],"names":["XLSX","make_cols","refstr","o","range","utils","decode_range","e","c","rowNum","s","r","row","colNum","nextCell","sheet","encode_cell","push","w"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA;;AACA,OAAO,MAAMC,SAAS,GAAGC,MAAM,IAAI;AAClC,MAAIC,CAAC,GAAG,EAAR;AACE,MAAIC,KAAK,GAAGJ,IAAI,CAACK,KAAL,CAAWC,YAAX,CAAwBJ,MAAxB,EAAgCK,CAAhC,CAAkCC,CAAlC,GAAsC,CAAlD,CAFgC,CAGlC;AACA;;AACA,OAAI,IAAIC,MAAM,GAAGL,KAAK,CAACM,CAAN,CAAQC,CAAzB,EAA4BF,MAAM,IAAIL,KAAK,CAACG,CAAN,CAAQI,CAA9C,EAAiDF,MAAM,EAAvD,EAA0D;AACzD,QAAIG,GAAG,GAAG,EAAV;;AACC,SAAI,IAAIC,MAAM,GAACT,KAAK,CAACM,CAAN,CAAQF,CAAvB,EAA0BK,MAAM,IAAET,KAAK,CAACG,CAAN,CAAQC,CAA1C,EAA6CK,MAAM,EAAnD,EAAsD;AACtD,UAAIC,QAAQ,GAAGC,KAAK,CACjBf,IAAI,CAACK,KAAL,CAAWW,WAAX,CAAuB;AAACL,QAAAA,CAAC,EAAEF,MAAJ;AAAYD,QAAAA,CAAC,EAAEK;AAAf,OAAvB,CADiB,CAApB;;AAGA,UAAI,OAAOC,QAAP,KAAoB,WAAxB,EAAqC;AAClCF,QAAAA,GAAG,CAACK,IAAJ,CAAS,KAAK,CAAd;AACF,OAFD,MAEOL,GAAG,CAACK,IAAJ,CAASH,QAAQ,CAACI,CAAlB;AACN;;AACDf,IAAAA,CAAC,CAACc,IAAF,CAAOL,GAAP;AACA,WAAOT,CAAP;AACA;AACF,CAlBM","sourcesContent":["import XLSX from 'xlsx';\n/* generate an array of column objects */\nexport const make_cols = refstr => {\n\tlet o = []\n\t  let range = XLSX.utils.decode_range(refstr).e.c + 1;\n\t// for(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\n\t// return o;\n\tfor(let rowNum = range.s.r; rowNum <= range.e.r; rowNum++){\n\t\tlet row = [];\n\t\t for(let colNum=range.s.c; colNum<=range.e.c; colNum++){\n\t\t\tvar nextCell = sheet[\n\t\t\t   XLSX.utils.encode_cell({r: rowNum, c: colNum})\n\t\t\t];\n\t\t\tif( typeof nextCell === 'undefined' ){\n\t\t\t   row.push(void 0);\n\t\t\t} else row.push(nextCell.w);\n\t\t }\n\t\t o.push(row);\n\t\t return o;\n\t }\n};\n\n"]},"metadata":{},"sourceType":"module"}