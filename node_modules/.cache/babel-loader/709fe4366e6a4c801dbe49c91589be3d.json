{"ast":null,"code":"import XLSX from 'xlsx';\n/* generate an array of column objects */\n// export const make_cols = refstr => {\n// \tlet o = [],\n// \t C = XLSX.utils.decode_range(refstr).e.c + 1;\n// \tfor(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\n// \treturn o; \n// };\n\nexport var make_cols = function (sheet) {\n  var result = [];\n  var row;\n  var rowNum;\n  var colNum;\n  var range = XLSX.utils.decode_range(sheet['!ref']);\n\n  for (rowNum = range.s.r; rowNum <= range.e.r; rowNum++) {\n    row = [];\n\n    for (colNum = range.s.c; colNum <= range.e.c; colNum++) {\n      var nextCell = sheet[XLSX.utils.encode_cell({\n        r: rowNum,\n        c: colNum\n      })];\n\n      if (typeof nextCell === 'undefined') {\n        row.push(void 0);\n      } else row.push(nextCell.w);\n    }\n\n    result.push(row);\n  }\n\n  return result;\n};","map":{"version":3,"sources":["/Users/meenumaria/Desktop/import-excel-code/src/components/MakeColumns.js"],"names":["XLSX","make_cols","sheet","result","row","rowNum","colNum","range","utils","decode_range","s","r","e","c","nextCell","encode_cell","push","w"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,SAAS,GAAG,UAASC,KAAT,EAAe;AACrC,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,GAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,KAAK,GAAGP,IAAI,CAACQ,KAAL,CAAWC,YAAX,CAAwBP,KAAK,CAAC,MAAD,CAA7B,CAAZ;;AACA,OAAIG,MAAM,GAAGE,KAAK,CAACG,CAAN,CAAQC,CAArB,EAAwBN,MAAM,IAAIE,KAAK,CAACK,CAAN,CAAQD,CAA1C,EAA6CN,MAAM,EAAnD,EAAsD;AACnDD,IAAAA,GAAG,GAAG,EAAN;;AACF,SAAIE,MAAM,GAACC,KAAK,CAACG,CAAN,CAAQG,CAAnB,EAAsBP,MAAM,IAAEC,KAAK,CAACK,CAAN,CAAQC,CAAtC,EAAyCP,MAAM,EAA/C,EAAkD;AAC/C,UAAIQ,QAAQ,GAAGZ,KAAK,CACpBF,IAAI,CAACQ,KAAL,CAAWO,WAAX,CAAuB;AAACJ,QAAAA,CAAC,EAAEN,MAAJ;AAAYQ,QAAAA,CAAC,EAAEP;AAAf,OAAvB,CADoB,CAApB;;AAGA,UAAI,OAAOQ,QAAP,KAAoB,WAAxB,EAAqC;AACrCV,QAAAA,GAAG,CAACY,IAAJ,CAAS,KAAK,CAAd;AACC,OAFD,MAEOZ,GAAG,CAACY,IAAJ,CAASF,QAAQ,CAACG,CAAlB;AACT;;AACDd,IAAAA,MAAM,CAACa,IAAP,CAAYZ,GAAZ;AACA;;AACD,SAAOD,MAAP;AACC,CAnBK","sourcesContent":["import XLSX from 'xlsx';\n/* generate an array of column objects */\n// export const make_cols = refstr => {\n// \tlet o = [],\n// \t C = XLSX.utils.decode_range(refstr).e.c + 1;\n// \tfor(var i = 0; i < C; ++i) o[i] = {name:XLSX.utils.encode_col(i), key:i}\n// \treturn o; \n// };\n\nexport var make_cols = function(sheet){\n\tvar result = [];\n\tvar row;\n\tvar rowNum;\n\tvar colNum;\n\tvar range = XLSX.utils.decode_range(sheet['!ref']);\n\tfor(rowNum = range.s.r; rowNum <= range.e.r; rowNum++){\n\t   row = [];\n\t\tfor(colNum=range.s.c; colNum<=range.e.c; colNum++){\n\t\t   var nextCell = sheet[\n\t\t\t  XLSX.utils.encode_cell({r: rowNum, c: colNum})\n\t\t   ];\n\t\t   if( typeof nextCell === 'undefined' ){\n\t\t\t  row.push(void 0);\n\t\t   } else row.push(nextCell.w);\n\t\t}\n\t\tresult.push(row);\n\t}\n\treturn result;\n };"]},"metadata":{},"sourceType":"module"}