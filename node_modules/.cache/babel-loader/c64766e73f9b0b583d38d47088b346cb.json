{"ast":null,"code":"var _jsxFileName = \"/Users/meenumaria/Desktop/import-excel-code/src/components/OutTable.js\";\nimport React, { Component } from 'react';\nimport XLSX from 'xlsx';\nexport class OutTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n\n    for (var i = 0; i < this.props.data.length; i++) {\n      this.props.data.splice(i + 1, 1);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, React.createElement(\"table\", {\n      className: this.props.tableClassName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, this.props.data.map((r, i) => React.createElement(\"tr\", {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, this.props.columns.slice(2).map(c => c.key === '' ? \"fdgf\" : React.createElement(\"td\", {\n      key: c.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, r[c.key])))))));\n  }\n\n}\nexport function ExcelRenderer(file, callback) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    var rABS = !!reader.readAsBinaryString;\n\n    reader.onload = function (e) {\n      /* Parse data */\n      var bstr = e.target.result;\n      var wb = XLSX.read(bstr, {\n        type: rABS ? \"binary\" : \"array\"\n      });\n      /* Get first worksheet */\n\n      var wsname = wb.SheetNames[0];\n      var ws = wb.Sheets[wsname];\n      /* Convert array of arrays */\n\n      var json = XLSX.utils.sheet_to_json(ws, {\n        header: 1\n      });\n      var cols = make_cols(ws[\"!ref\"]);\n      var data = {\n        rows: json,\n        cols: cols\n      };\n      resolve(data);\n      return callback(null, data);\n    };\n\n    if (file && rABS) reader.readAsBinaryString(file);else reader.readAsArrayBuffer(file);\n  });\n}\n\nfunction make_cols(refstr) {\n  var o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n\n  for (var i = 0; i < C; ++i) {\n    o[i] = {\n      name: XLSX.utils.encode_col(i),\n      key: i\n    };\n  }\n\n  return o;\n}","map":{"version":3,"sources":["/Users/meenumaria/Desktop/import-excel-code/src/components/OutTable.js"],"names":["React","Component","XLSX","OutTable","constructor","props","state","i","data","length","splice","render","tableClassName","map","r","columns","slice","c","key","ExcelRenderer","file","callback","Promise","resolve","reject","reader","FileReader","rABS","readAsBinaryString","onload","e","bstr","target","result","wb","read","type","wsname","SheetNames","ws","Sheets","json","utils","sheet_to_json","header","cols","make_cols","rows","readAsArrayBuffer","refstr","o","C","decode_range","name","encode_col"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport XLSX from 'xlsx';\n\nexport class OutTable extends Component {\n\n\tconstructor(props) { \n        super(props);\n        this.state = {\n            \n        }\n        for (var i = 0; i < this.props.data.length; i++) {\n          this.props.data.splice(i + 1, 1);\n        }\n    }\n\n\trender() { \n        return (\n            <div>\n                <table className={this.props.tableClassName}  >                                       \n                    <tbody>\n                        {/* <tr>\n                          {\n                            \n                                this.props.columns.slice(3).map((c) => \n                                    <th key={c.key} className={c.key === -1 ? this.props.tableHeaderRowClass : \"\"}>{c.key === -1 ? \"\" : c.name}</th>\n                                )\n                            \n                            }\n                        </tr> */}\n                        \n                        {\n                          this.props.data.map((r,i) =>\n                        <tr key={i}>\n    \n                            {this.props.columns.slice(2).map(c => \n                            c.key === '' ? \"fdgf\" : <td key={c.key}>{ r[c.key] }</td>)}\n                        </tr>)}\n                    </tbody>\n                </table>\n            </div>\n        ); \n    }\n}\n\nexport function ExcelRenderer(file, callback) {\n    return new Promise(function(resolve, reject) {\n      var reader = new FileReader();\n      var rABS = !!reader.readAsBinaryString;\n      reader.onload = function(e) {\n        /* Parse data */\n        var bstr = e.target.result;\n        var wb = XLSX.read(bstr, { type: rABS ? \"binary\" : \"array\" });\n  \n        /* Get first worksheet */\n        var wsname = wb.SheetNames[0];\n        var ws = wb.Sheets[wsname];\n  \n        /* Convert array of arrays */\n        var json = XLSX.utils.sheet_to_json(ws, { header: 1 });\n        var cols = make_cols(ws[\"!ref\"]);\n  \n        var data = { rows: json, cols: cols };\n  \n        resolve(data);\n        return callback(null, data);\n      };\n      if (file && rABS) reader.readAsBinaryString(file);\n      else reader.readAsArrayBuffer(file);\n    });\n  }\n  \n  function make_cols(refstr) {\n    var o = [],\n      C = XLSX.utils.decode_range(refstr).e.c + 1;\n    for (var i = 0; i < C; ++i) {\n      o[i] = { name: XLSX.utils.encode_col(i), key: i };\n    }  \n    return o;\n  }"]},"metadata":{},"sourceType":"module"}